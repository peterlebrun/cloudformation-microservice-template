AWSTemplateFormatVersion: "2010-09-09"
Description: Create Cloudfront distribution backed by S3 bucket, and relevant service accounts.

Parameters:
  DomainName:
    Type: String
  HostedZoneId:
    Type: String
  CertificateId:
    Type: String

Resources: 
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: "404.html"
        #RoutingRules:
        #  - RoutingRuleCondition:
        #      KeyPrefixEquals: "api/"
        #    RedirectRule:
        #      HostName: "api.domain.com"
  S3IAMUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: AbleToListBucket
          PolicyDocument:
           Version: "2012-10-17"
           Statement:
           - Effect: Allow
             Action:
              - s3:ListBucket
             Resource:
              - !GetAtt S3Bucket.Arn
        - PolicyName: AbleToReadWriteObjects
          PolicyDocument:
           Version: "2012-10-17"
           Statement:
            - Effect: Allow
              Action:
               - s3:*Object
              Resource:
              - !Join ["/", [!GetAtt S3Bucket.Arn, "*"]]
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn:
      - CloudFrontOriginAccessIdentity
    Properties:
      Bucket: !Sub ${S3Bucket}
      PolicyDocument:
        Statement:
          - Sid: PolicyForCloudFrontPrivateContent
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${S3Bucket}/*
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Unique Domain Hosting Environment
  #CloudFrontDistribution:
  #  Type: AWS::CloudFront::Distribution
  #  DependsOn:
  #    - S3Bucket
  #    - CloudFrontOriginAccessIdentity
  #  Properties:
  #    DistributionConfig:
  #      Aliases:
  #        - !Sub ${DomainName}
  #      Origins:
  #        - DomainName: !Sub ${S3Bucket}.s3.${AWS::Region}.amazonaws.com
  #          Id: !Sub ${S3Bucket}.s3.${AWS::Region}.amazonaws.com
  #          S3OriginConfig:
  #            OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
  #      DefaultCacheBehavior:
  #        TargetOriginId: !Sub ${S3Bucket}.s3.${AWS::Region}.amazonaws.com
  #        Compress: true
  #        AllowedMethods:
  #          - HEAD
  #          - GET
  #        CachedMethods:
  #          - HEAD
  #          - GET
  #        ViewerProtocolPolicy: redirect-to-https
  #        CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad #cache disabled
  #        # CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 cache enabled
  #      CustomErrorResponses:
  #        - ErrorCode: 403
  #          ResponsePagePath: /index.html
  #          ResponseCode: 200
  #          ErrorCachingMinTTL: 0
  #        - ErrorCode: 404
  #          ResponsePagePath: /index.html
  #          ResponseCode: 200
  #          ErrorCachingMinTTL: 0
  #      PriceClass: PriceClass_All
  #      Enabled: true
  #      ViewerCertificate:
  #        AcmCertificateArn: !Sub arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/${CertificateId}
  #        MinimumProtocolVersion: TLSv1.2_2021
  #        SslSupportMethod: sni-only
  #      Restrictions:
  #        GeoRestriction:
  #          RestrictionType: none
  #      HttpVersion: http2
  #      DefaultRootObject: index.html
  #      IPV6Enabled: true
  #Route53RecordSet:
  #  Type: AWS::Route53::RecordSet
  #  DependsOn:
  #    - CloudFrontDistribution
  #  Properties:
  #    Name: !Ref DomainName
  #    HostedZoneId: !Ref HostedZoneId
  #    Type: A
  #    AliasTarget:
  #      DNSName: !GetAtt CloudFrontDistribution.DomainName
  #      HostedZoneId: Z2FDTNDATAQYW2